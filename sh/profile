# Nvidia libraries
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:/usr/local/lib:/usr/local/cuda/lib64:/usr/local/trt/lib:/usr/local/tensorrt/lib
export PATH=${PATH}:/usr/local/cuda/bin:/opt/ngc-cli

# GStreamer (macOS)
export PATH="/Library/Frameworks/GStreamer.framework/Commands":${PATH}

# Qt
# export QT_LIBRARY_PATH=${HOME}/Development/lib/Qt5.12.0/5.12.0/clang_64
# export PATH=${QT_LIBRARY_PATH}/bin:${PATH}

# Private bin folder
export PATH="${HOME}/.bin:${HOME}/.local/bin:${PATH}"

# Node
export PATH="/opt/node/bin:/opt/cmake/bin:${PATH}"

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init --path)"

# For Poetry
export PATH="${HOME}/.poetry/bin:${PATH}"
export PYTHON_KEYRING_BACKEND=keyring.backends.fail.Keyring


export USER_ID=$(id -u)
export GROUP_ID=$(id -g)

# PlatformIO (Set the path at the end so that it does not interfere with pyenv.)
# export PATH=${PATH}:${HOME}/.platformio/penv/bin

# Rust and cargo
export PATH=${HOME}/.cargo/bin:${PATH}

# some more ls aliases
alias ll='ls -lFh'
alias la='ls -A'
alias l='ls -CF'
# alias nvim='PATH={HOME}/.local/share/nvim/lib/python/bin:${HOME}/.local/share/nvim/lib/node/bin:${PATH} nvim'

export PATH=/opt/nvim/bin:${PATH}
alias ztheme='(){ export ZSH_THEME="$@" && source $ZSH/oh-my-zsh.sh }'
alias texfolder='cd /Users/gilbert/Library/Mobile\ Documents/com~apple~CloudDocs/Gilbert/Documents/Texpad'

alias mkmov='ffmpeg -framerate 25 -start_number $(ls -1 *.jpg | awk -F"[.]" "{print \$1}" | sort -n | head -n 1) -i %08d.jpg -c:v libx264 -pix_fmt yuv420p movie.mp4'


# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
    export EDITOR='nvim'
else
    export EDITOR='nvim'
fi

# Brew
export PATH=/opt/homebrew/sbin:/opt/homebrew/bin:${PATH}

# for mosh
export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export LC_CTYPE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

export USER_ID=$(id -u)
export GROUP_ID=$(id -g)

# AWS S3
# Uploads newer apothecary files from local disk to S3.
function apup() {
    echo "Uploading ${HOME}/ava-x/apothecary/ -> s3://apothecary.smbh.ch/"
    aws --profile ava-x-skuld s3 sync --sse AES256 ${HOME}/ava-x/apothecary/ s3://apothecary.smbh.ch/
}

# Downloads apothecary files from S3 to local disk.
function apdown() {
    echo "Downloading $s3://apothecary.smbh.ch/ -> {HOME}/ava-x/apothecary/"
    aws --profile ava-x-skuld s3 sync --sse AES256 s3://apothecary.smbh.ch/ ${HOME}/ava-x/apothecary/
}

# example: apls data/unittest/
function apls() {
    aws --profile ava-x-skuld s3 ls s3://apothecary.smbh.ch/$1 
}

# example: dataup copy myfile.tar data/data/
#          dataup sync myfolder/ data/data/myfolder/
function dataup() {
    if [ $# -eq 0 ]; then
        echo "example: "
        echo "   dataup sync myfolder/ data/data/myfolder/"
        echo "   dataup cp myfile.tar data/data/"
    else
        aws --profile ava-x-skuld s3 $1 --sse AES256 $2 s3://data-gilbert.ava-x.ch/$3
    fi
}

function datadown() {
    if [ $# -eq 0 ]; then
        echo "example: "
        echo "   datadown sync data/data/myfolder/ myfolder/"
        echo "   datadown cp data/data/ myfile.tar"
    else
       aws --profile ava-x-skuld s3 $1 --sse AES256 s3://data-gilbert.ava-x.ch/$2 $3
    fi
}

function datals() {
    if [ $# -eq 0 ]; then
        echo "example: "
        echo "   datals data/"
    else
       aws --profile ava-x-skuld s3 ls s3://data-gilbert.ava-x.ch/$1
    fi
}

function enc() {
    if [ $# -eq 0 ]; then
        echo "example: "
        echo "   enc myfile.tar.gz"
    else
        openssl enc -aes-256-cbc -pbkdf2 -e -in ${1} -out ${1}.enc 
    fi
}

function dec() {
    if [ $# -eq 0 ]; then
        echo "example: "
        echo "   dec myfile.tar.gz.enc"
    else
        filename=${1}
        filename_noext=${filename%.*}
        extension=${filename##*.}
        openssl enc -aes-256-cbc -pbkdf2 -d -in ${1} -out ${filename_noext}
    fi
}

function setup_disk_enc() {
    # $1 device, e.g. /dev/sda1
    # $2 mount point, e.g. mydata (will be converted to /mnt/mydata)
    sudo cryptsetup luksFormat --type luks2 $1
    sudo cryptsetup open --type luks2 $1
    sudo mkfs.ext4 /dev/mapper/$2
    mkdir -p /mnt/$2
    sudo mount /dev/mapper/$2 /mnt/$2
}

function mount_enc() {
    # $1 device:      /dev/sda1
    # $2 mount point: mydata (will be converted to /mnt/mydata)
    if [[ $2 == */* ]]; then
        echo "Mount point should only contain the folder name, not the whole path."
	exit
    else
        sudo cryptsetup open --type luks2 $1 $2
        sudo mount /dev/mapper/$2 /mnt/$2
    fi
}

function mv2s3() {
    pwd=`pwd`
    cwd=`basename ${pwd}`
    src=${1}
    dst=../../s3/data_src/${cwd}
    echo "Initiating: ${src} -> ${dst}"
    mkdir -p ${dst}
    mv -v ${src} ${dst}
}

function av() {
    if [ $# -eq 0 ]; then
        echo "Alias for ansible-vault"
        echo "example: "
        echo "   av [action] [file]"
    else
        ansible-vault $1 --vault-pass-file ~/.vault_pass.txt $2
    fi
}

xterm-kitty-settings() {
  if [ -z "$1" ]; then
    echo "Usage: xterm-kitty-settings user@host"
    return 1
  fi
  local host="$1"
  echo ">> Installing xterm-kitty terminfo on $host ..."
  infocmp -x xterm-kitty \
    | sed '1 s/,.*$//' \
    | ssh "$host" 'mkdir -p ~/.terminfo && tic -x -o ~/.terminfo -' \
      && echo "   Done." \
      || echo "   FAILED."
}


# eval "$(perl -I$HOME/perl5/lib/perl5 -Mlocal::lib=$HOME/perl5)"
